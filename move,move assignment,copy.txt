#include <iostream>
#include <cstring>

class MyClass {
    private:
    int* mData;
    int mSize;
public:
    MyClass() : mData(nullptr), mSize(0) {}
    MyClass(int size) : mSize(size) {
        mData = new int[size];
        for (int i = 0; i < size; ++i) {
            mData[i] = i;
        }
    }
    // Deep copy constructor
    MyClass(const MyClass& other) : mSize(other.mSize) {
        mData = new int[mSize];
        std::memcpy(mData, other.mData, mSize * sizeof(int));
    }
    // Move constructor
    MyClass(MyClass&& other) noexcept {
        mData = other.mData;
        mSize = other.mSize;
        other.mData = nullptr;
        other.mSize = 0;
    }
    // Move assignment
    MyClass& operator=(MyClass&& other) noexcept {
        if (this != &other) {
            delete[] mData;
            mData = other.mData;
            mSize = other.mSize;
            other.mData = nullptr;
            other.mSize = 0;
        }
        return *this;
    }
    ~MyClass() {
        delete[] mData;
    }
    void printData() const {
        for (int i = 0; i < mSize; ++i) {
            std::cout << mData[i] << " ";
        }
        std::cout << std::endl;
    }

};

int main() {
    // Create a MyClass object with size 5
    MyClass obj1(5);
    std::cout << "obj1 data: ";
    obj1.printData();

    // Create a new MyClass object using move constructor
    MyClass obj2(std::move(obj1));
    std::cout << "obj2 data: ";
    obj2.printData();
    obj1.printData();

    // Use move assignment to transfer ownership of obj2 to obj3
    MyClass obj3;
    obj3 = std::move(obj2);
    std::cout << "obj3 data: ";
    obj3.printData();
     obj2.printData();

    // Create a new MyClass object using deep copy constructor
    MyClass obj4(obj3);
    std::cout << "obj4 data: ";
    obj4.printData();
     obj3.printData();
    

    return 0;
}
